/*Copyright (c) 2016-2017 jjrichards.com.au All Rights Reserved.
 This software is the confidential and proprietary information of jjrichards.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with jjrichards.com.au*/
package com.smsinternal.sms.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.smsinternal.sms.service.TradeCertificateService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.smsinternal.sms.*;
import com.smsinternal.sms.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class TradeCertificate.
 * @see com.smsinternal.sms.TradeCertificate
 */
@RestController(value = "SMS.TradeCertificateController")
@RequestMapping("/SMS/TradeCertificate")
@Api(description = "Exposes APIs to work with TradeCertificate resource.", value = "TradeCertificateController")
public class TradeCertificateController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TradeCertificateController.class);

    @Autowired
    @Qualifier("SMS.TradeCertificateService")
    private TradeCertificateService tradeCertificateService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of TradeCertificate instances matching the search criteria.")
    public Page<TradeCertificate> findTradeCertificates(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TradeCertificates list");
        return tradeCertificateService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of TradeCertificate instances.")
    public Page<TradeCertificate> getTradeCertificates(Pageable pageable) {
        LOGGER.debug("Rendering TradeCertificates list");
        return tradeCertificateService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setTradeCertificateService(TradeCertificateService service) {
        this.tradeCertificateService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new TradeCertificate instance.")
    public TradeCertificate createTradeCertificate(@RequestBody TradeCertificate instance) {
        LOGGER.debug("Create TradeCertificate with information: {}", instance);
        instance = tradeCertificateService.create(instance);
        LOGGER.debug("Created TradeCertificate with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of TradeCertificate instances.")
    public Long countAllTradeCertificates() {
        LOGGER.debug("counting TradeCertificates");
        Long count = tradeCertificateService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the TradeCertificate instance associated with the given id.")
    public TradeCertificate getTradeCertificate(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TradeCertificate with id: {}", id);
        TradeCertificate instance = tradeCertificateService.findById(id);
        LOGGER.debug("TradeCertificate details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the TradeCertificate instance associated with the given id.")
    public TradeCertificate editTradeCertificate(@PathVariable(value = "id") Integer id, @RequestBody TradeCertificate instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TradeCertificate with id: {}", instance.getId());
        instance.setId(id);
        instance = tradeCertificateService.update(instance);
        LOGGER.debug("TradeCertificate details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the TradeCertificate instance associated with the given id.")
    public boolean deleteTradeCertificate(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TradeCertificate with id: {}", id);
        TradeCertificate deleted = tradeCertificateService.delete(id);
        return deleted != null;
    }
}
