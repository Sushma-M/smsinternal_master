/*Copyright (c) 2016-2017 jjrichards.com.au All Rights Reserved.
 This software is the confidential and proprietary information of jjrichards.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with jjrichards.com.au*/
package com.smsinternal.sms.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.smsinternal.sms.service.ServiceTypesService;
import com.smsinternal.sms.service.SupplierServicesService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.smsinternal.sms.*;
import com.smsinternal.sms.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class ServiceTypes.
 * @see com.smsinternal.sms.ServiceTypes
 */
@RestController(value = "SMS.ServiceTypesController")
@RequestMapping("/SMS/ServiceTypes")
@Api(description = "Exposes APIs to work with ServiceTypes resource.", value = "ServiceTypesController")
public class ServiceTypesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ServiceTypesController.class);

    @Autowired
    @Qualifier("SMS.ServiceTypesService")
    private ServiceTypesService serviceTypesService;

    @Autowired
    @Qualifier("SMS.SupplierServicesService")
    private SupplierServicesService supplierServicesService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of ServiceTypes instances matching the search criteria.")
    public Page<ServiceTypes> findServiceTypess(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ServiceTypess list");
        return serviceTypesService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ServiceTypes instances.")
    public Page<ServiceTypes> getServiceTypess(Pageable pageable) {
        LOGGER.debug("Rendering ServiceTypess list");
        return serviceTypesService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/supplierServiceses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the supplierServiceses instance associated with the given id.")
    public Page<SupplierServices> findAssociatedsupplierServiceses(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated supplierServiceses");
        return supplierServicesService.findAssociatedValues(id, "serviceTypes", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setServiceTypesService(ServiceTypesService service) {
        this.serviceTypesService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new ServiceTypes instance.")
    public ServiceTypes createServiceTypes(@RequestBody ServiceTypes instance) {
        LOGGER.debug("Create ServiceTypes with information: {}", instance);
        instance = serviceTypesService.create(instance);
        LOGGER.debug("Created ServiceTypes with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of ServiceTypes instances.")
    public Long countAllServiceTypess() {
        LOGGER.debug("counting ServiceTypess");
        Long count = serviceTypesService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the ServiceTypes instance associated with the given id.")
    public ServiceTypes getServiceTypes(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ServiceTypes with id: {}", id);
        ServiceTypes instance = serviceTypesService.findById(id);
        LOGGER.debug("ServiceTypes details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the ServiceTypes instance associated with the given id.")
    public ServiceTypes editServiceTypes(@PathVariable(value = "id") Integer id, @RequestBody ServiceTypes instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ServiceTypes with id: {}", instance.getId());
        instance.setId(id);
        instance = serviceTypesService.update(instance);
        LOGGER.debug("ServiceTypes details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the ServiceTypes instance associated with the given id.")
    public boolean deleteServiceTypes(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ServiceTypes with id: {}", id);
        ServiceTypes deleted = serviceTypesService.delete(id);
        return deleted != null;
    }
}
