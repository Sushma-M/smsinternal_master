/*Copyright (c) 2016-2017 jjrichards.com.au All Rights Reserved.
 This software is the confidential and proprietary information of jjrichards.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with jjrichards.com.au*/
package com.smsinternal.sms.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.smsinternal.sms.service.CountriesService;
import com.smsinternal.sms.service.StatesService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.smsinternal.sms.*;
import com.smsinternal.sms.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Countries.
 * @see com.smsinternal.sms.Countries
 */
@RestController(value = "SMS.CountriesController")
@RequestMapping("/SMS/Countries")
@Api(description = "Exposes APIs to work with Countries resource.", value = "CountriesController")
public class CountriesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CountriesController.class);

    @Autowired
    @Qualifier("SMS.CountriesService")
    private CountriesService countriesService;

    @Autowired
    @Qualifier("SMS.StatesService")
    private StatesService statesService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Countries instances matching the search criteria.")
    public Page<Countries> findCountriess(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Countriess list");
        return countriesService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Countries instances.")
    public Page<Countries> getCountriess(Pageable pageable) {
        LOGGER.debug("Rendering Countriess list");
        return countriesService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/stateses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the stateses instance associated with the given id.")
    public Page<States> findAssociatedstateses(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated stateses");
        return statesService.findAssociatedValues(id, "countries", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setCountriesService(CountriesService service) {
        this.countriesService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Countries instance.")
    public Countries createCountries(@RequestBody Countries instance) {
        LOGGER.debug("Create Countries with information: {}", instance);
        instance = countriesService.create(instance);
        LOGGER.debug("Created Countries with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Countries instances.")
    public Long countAllCountriess() {
        LOGGER.debug("counting Countriess");
        Long count = countriesService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Countries instance associated with the given id.")
    public Countries getCountries(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Countries with id: {}", id);
        Countries instance = countriesService.findById(id);
        LOGGER.debug("Countries details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Countries instance associated with the given id.")
    public Countries editCountries(@PathVariable(value = "id") Integer id, @RequestBody Countries instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Countries with id: {}", instance.getId());
        instance.setId(id);
        instance = countriesService.update(instance);
        LOGGER.debug("Countries details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Countries instance associated with the given id.")
    public boolean deleteCountries(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Countries with id: {}", id);
        Countries deleted = countriesService.delete(id);
        return deleted != null;
    }
}
