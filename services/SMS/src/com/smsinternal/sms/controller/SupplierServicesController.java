/*Copyright (c) 2016-2017 jjrichards.com.au All Rights Reserved.
 This software is the confidential and proprietary information of jjrichards.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with jjrichards.com.au*/
package com.smsinternal.sms.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.smsinternal.sms.service.SupplierServicesService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.smsinternal.sms.*;
import com.smsinternal.sms.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class SupplierServices.
 * @see com.smsinternal.sms.SupplierServices
 */
@RestController(value = "SMS.SupplierServicesController")
@RequestMapping("/SMS/SupplierServices")
@Api(description = "Exposes APIs to work with SupplierServices resource.", value = "SupplierServicesController")
public class SupplierServicesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SupplierServicesController.class);

    @Autowired
    @Qualifier("SMS.SupplierServicesService")
    private SupplierServicesService supplierServicesService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of SupplierServices instances matching the search criteria.")
    public Page<SupplierServices> findSupplierServicess(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SupplierServicess list");
        return supplierServicesService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of SupplierServices instances.")
    public Page<SupplierServices> getSupplierServicess(Pageable pageable) {
        LOGGER.debug("Rendering SupplierServicess list");
        return supplierServicesService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setSupplierServicesService(SupplierServicesService service) {
        this.supplierServicesService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new SupplierServices instance.")
    public SupplierServices createSupplierServices(@RequestBody SupplierServices instance) {
        LOGGER.debug("Create SupplierServices with information: {}", instance);
        instance = supplierServicesService.create(instance);
        LOGGER.debug("Created SupplierServices with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of SupplierServices instances.")
    public Long countAllSupplierServicess() {
        LOGGER.debug("counting SupplierServicess");
        Long count = supplierServicesService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the SupplierServices instance associated with the given id.")
    public SupplierServices getSupplierServices(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting SupplierServices with id: {}", id);
        SupplierServices instance = supplierServicesService.findById(id);
        LOGGER.debug("SupplierServices details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the SupplierServices instance associated with the given id.")
    public SupplierServices editSupplierServices(@PathVariable(value = "id") Integer id, @RequestBody SupplierServices instance) throws EntityNotFoundException {
        LOGGER.debug("Editing SupplierServices with id: {}", instance.getId());
        instance.setId(id);
        instance = supplierServicesService.update(instance);
        LOGGER.debug("SupplierServices details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the SupplierServices instance associated with the given id.")
    public boolean deleteSupplierServices(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting SupplierServices with id: {}", id);
        SupplierServices deleted = supplierServicesService.delete(id);
        return deleted != null;
    }
}
