/*Copyright (c) 2016-2017 jjrichards.com.au All Rights Reserved.
 This software is the confidential and proprietary information of jjrichards.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with jjrichards.com.au*/
package com.smsinternal.sms.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.smsinternal.sms.service.SupplierStatesService;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.smsinternal.sms.*;
import com.smsinternal.sms.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class SupplierStates.
 * @see com.smsinternal.sms.SupplierStates
 */
@RestController(value = "SMS.SupplierStatesController")
@RequestMapping("/SMS/SupplierStates")
@Api(description = "Exposes APIs to work with SupplierStates resource.", value = "SupplierStatesController")
public class SupplierStatesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SupplierStatesController.class);

    @Autowired
    @Qualifier("SMS.SupplierStatesService")
    private SupplierStatesService supplierStatesService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of SupplierStates instances matching the search criteria.")
    public Page<SupplierStates> findSupplierStatess(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering SupplierStatess list");
        return supplierStatesService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of SupplierStates instances.")
    public Page<SupplierStates> getSupplierStatess(Pageable pageable) {
        LOGGER.debug("Rendering SupplierStatess list");
        return supplierStatesService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setSupplierStatesService(SupplierStatesService service) {
        this.supplierStatesService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new SupplierStates instance.")
    public SupplierStates createSupplierStates(@RequestBody SupplierStates instance) {
        LOGGER.debug("Create SupplierStates with information: {}", instance);
        instance = supplierStatesService.create(instance);
        LOGGER.debug("Created SupplierStates with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the SupplierStates instance associated with the given composite-id.")
    public SupplierStates getSupplierStates(@RequestParam(value = "id", required = true) Integer id, @RequestParam(value = "supplierId", required = true) Integer supplierId, @RequestParam(value = "statesId", required = true) Integer statesId) throws EntityNotFoundException {
        SupplierStatesId temp = new SupplierStatesId();
        temp.setId(id);
        temp.setSupplierId(supplierId);
        temp.setStatesId(statesId);
        LOGGER.debug("Getting SupplierStates with id: {}", temp);
        SupplierStates instance = supplierStatesService.findById(temp);
        LOGGER.debug("SupplierStates details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the SupplierStates instance associated with the given composite-id.")
    public SupplierStates editSupplierStates(@RequestParam(value = "id", required = true) Integer id, @RequestParam(value = "supplierId", required = true) Integer supplierId, @RequestParam(value = "statesId", required = true) Integer statesId, @RequestBody SupplierStates instance) throws EntityNotFoundException {
        SupplierStatesId temp = new SupplierStatesId();
        temp.setId(id);
        temp.setSupplierId(supplierId);
        temp.setStatesId(statesId);
        supplierStatesService.delete(temp);
        instance = supplierStatesService.create(instance);
        LOGGER.debug("SupplierStates details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the SupplierStates instance associated with the given composite-id.")
    public boolean deleteSupplierStates(@RequestParam(value = "id", required = true) Integer id, @RequestParam(value = "supplierId", required = true) Integer supplierId, @RequestParam(value = "statesId", required = true) Integer statesId) throws EntityNotFoundException {
        SupplierStatesId temp = new SupplierStatesId();
        temp.setId(id);
        temp.setSupplierId(supplierId);
        temp.setStatesId(statesId);
        LOGGER.debug("Deleting SupplierStates with id: {}", temp);
        SupplierStates deleted = supplierStatesService.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of SupplierStates instances.")
    public Long countAllSupplierStatess() {
        LOGGER.debug("counting SupplierStatess");
        Long count = supplierStatesService.countAll();
        return count;
    }
}
