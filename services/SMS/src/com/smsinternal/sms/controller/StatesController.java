/*Copyright (c) 2016-2017 jjrichards.com.au All Rights Reserved.
 This software is the confidential and proprietary information of jjrichards.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with jjrichards.com.au*/
package com.smsinternal.sms.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.smsinternal.sms.service.MontorVehicleInsuranceService;
import com.smsinternal.sms.service.PublicLiabilityService;
import com.smsinternal.sms.service.StatesService;
import com.smsinternal.sms.service.SupplierStatesService;
import com.smsinternal.sms.service.TradeCertificateService;
import com.smsinternal.sms.service.WorkersCompensationService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.smsinternal.sms.*;
import com.smsinternal.sms.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class States.
 * @see com.smsinternal.sms.States
 */
@RestController(value = "SMS.StatesController")
@RequestMapping("/SMS/States")
@Api(description = "Exposes APIs to work with States resource.", value = "StatesController")
public class StatesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(StatesController.class);

    @Autowired
    @Qualifier("SMS.StatesService")
    private StatesService statesService;

    @Autowired
    @Qualifier("SMS.PublicLiabilityService")
    private PublicLiabilityService publicLiabilityService;

    @Autowired
    @Qualifier("SMS.WorkersCompensationService")
    private WorkersCompensationService workersCompensationService;

    @Autowired
    @Qualifier("SMS.MontorVehicleInsuranceService")
    private MontorVehicleInsuranceService montorVehicleInsuranceService;

    @Autowired
    @Qualifier("SMS.TradeCertificateService")
    private TradeCertificateService tradeCertificateService;

    @Autowired
    @Qualifier("SMS.SupplierStatesService")
    private SupplierStatesService supplierStatesService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of States instances matching the search criteria.")
    public Page<States> findStatess(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Statess list");
        return statesService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of States instances.")
    public Page<States> getStatess(Pageable pageable) {
        LOGGER.debug("Rendering Statess list");
        return statesService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}/publicLiabilities", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the publicLiabilities instance associated with the given id.")
    public Page<PublicLiability> findAssociatedpublicLiabilities(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated publicLiabilities");
        return publicLiabilityService.findAssociatedValues(id, "states", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/supplierStateses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the supplierStateses instance associated with the given id.")
    public Page<SupplierStates> findAssociatedsupplierStateses(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated supplierStateses");
        return supplierStatesService.findAssociatedValues(id, "states", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/workersCompensations", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the workersCompensations instance associated with the given id.")
    public Page<WorkersCompensation> findAssociatedworkersCompensations(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated workersCompensations");
        return workersCompensationService.findAssociatedValues(id, "states", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/montorVehicleInsurances", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the montorVehicleInsurances instance associated with the given id.")
    public Page<MontorVehicleInsurance> findAssociatedmontorVehicleInsurances(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated montorVehicleInsurances");
        return montorVehicleInsuranceService.findAssociatedValues(id, "states", "id", pageable);
    }

    @RequestMapping(value = "/{id:.+}/tradeCertificates", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the tradeCertificates instance associated with the given id.")
    public Page<TradeCertificate> findAssociatedtradeCertificates(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated tradeCertificates");
        return tradeCertificateService.findAssociatedValues(id, "states", "id", pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setStatesService(StatesService service) {
        this.statesService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new States instance.")
    public States createStates(@RequestBody States instance) {
        LOGGER.debug("Create States with information: {}", instance);
        instance = statesService.create(instance);
        LOGGER.debug("Created States with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of States instances.")
    public Long countAllStatess() {
        LOGGER.debug("counting Statess");
        Long count = statesService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the States instance associated with the given id.")
    public States getStates(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting States with id: {}", id);
        States instance = statesService.findById(id);
        LOGGER.debug("States details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the States instance associated with the given id.")
    public States editStates(@PathVariable(value = "id") Integer id, @RequestBody States instance) throws EntityNotFoundException {
        LOGGER.debug("Editing States with id: {}", instance.getId());
        instance.setId(id);
        instance = statesService.update(instance);
        LOGGER.debug("States details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the States instance associated with the given id.")
    public boolean deleteStates(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting States with id: {}", id);
        States deleted = statesService.delete(id);
        return deleted != null;
    }
}
