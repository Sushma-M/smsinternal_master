/*Copyright (c) 2016-2017 jjrichards.com.au All Rights Reserved.
 This software is the confidential and proprietary information of jjrichards.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with jjrichards.com.au*/
package com.smsinternal.sms.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.smsinternal.sms.service.JjrusersService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.smsinternal.sms.*;
import com.smsinternal.sms.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Jjrusers.
 * @see com.smsinternal.sms.Jjrusers
 */
@RestController(value = "SMS.JjrusersController")
@RequestMapping("/SMS/Jjrusers")
@Api(description = "Exposes APIs to work with Jjrusers resource.", value = "JjrusersController")
public class JjrusersController {

    private static final Logger LOGGER = LoggerFactory.getLogger(JjrusersController.class);

    @Autowired
    @Qualifier("SMS.JjrusersService")
    private JjrusersService jjrusersService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Jjrusers instances matching the search criteria.")
    public Page<Jjrusers> findJjruserss(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Jjruserss list");
        return jjrusersService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Jjrusers instances.")
    public Page<Jjrusers> getJjruserss(Pageable pageable) {
        LOGGER.debug("Rendering Jjruserss list");
        return jjrusersService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setJjrusersService(JjrusersService service) {
        this.jjrusersService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Jjrusers instance.")
    public Jjrusers createJjrusers(@RequestBody Jjrusers instance) {
        LOGGER.debug("Create Jjrusers with information: {}", instance);
        instance = jjrusersService.create(instance);
        LOGGER.debug("Created Jjrusers with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Jjrusers instances.")
    public Long countAllJjruserss() {
        LOGGER.debug("counting Jjruserss");
        Long count = jjrusersService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Jjrusers instance associated with the given id.")
    public Jjrusers getJjrusers(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Jjrusers with id: {}", id);
        Jjrusers instance = jjrusersService.findById(id);
        LOGGER.debug("Jjrusers details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Jjrusers instance associated with the given id.")
    public Jjrusers editJjrusers(@PathVariable(value = "id") Integer id, @RequestBody Jjrusers instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Jjrusers with id: {}", instance.getId());
        instance.setId(id);
        instance = jjrusersService.update(instance);
        LOGGER.debug("Jjrusers details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Jjrusers instance associated with the given id.")
    public boolean deleteJjrusers(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Jjrusers with id: {}", id);
        Jjrusers deleted = jjrusersService.delete(id);
        return deleted != null;
    }
}
