/*Copyright (c) 2016-2017 jjrichards.com.au All Rights Reserved.
 This software is the confidential and proprietary information of jjrichards.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with jjrichards.com.au*/

package com.smsinternal.sms.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.smsinternal.sms.*;


/**
 * ServiceImpl object for domain model class Jjrusers.
 * @see com.smsinternal.sms.Jjrusers
 */
@Service("SMS.JjrusersService")
public class JjrusersServiceImpl implements JjrusersService {


    private static final Logger LOGGER = LoggerFactory.getLogger(JjrusersServiceImpl.class);

    @Autowired
    @Qualifier("SMS.JjrusersDao")
    private WMGenericDao<Jjrusers, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Jjrusers, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "SMSTransactionManager")
     public Page<Jjrusers> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "SMSTransactionManager")
    @Override
    public Jjrusers create(Jjrusers jjrusers) {
        LOGGER.debug("Creating a new jjrusers with information: {}" , jjrusers);
        return this.wmGenericDao.create(jjrusers);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SMSTransactionManager")
    @Override
    public Jjrusers delete(Integer jjrusersId) throws EntityNotFoundException {
        LOGGER.debug("Deleting jjrusers with id: {}" , jjrusersId);
        Jjrusers deleted = this.wmGenericDao.findById(jjrusersId);
        if (deleted == null) {
            LOGGER.debug("No jjrusers found with id: {}" , jjrusersId);
            throw new EntityNotFoundException(String.valueOf(jjrusersId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public Page<Jjrusers> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all jjruserss");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public Page<Jjrusers> findAll(Pageable pageable) {
        LOGGER.debug("Finding all jjruserss");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public Jjrusers findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding jjrusers by id: {}" , id);
        Jjrusers jjrusers=this.wmGenericDao.findById(id);
        if(jjrusers==null){
            LOGGER.debug("No jjrusers found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return jjrusers;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SMSTransactionManager")
    @Override
    public Jjrusers update(Jjrusers updated) throws EntityNotFoundException {
        LOGGER.debug("Updating jjrusers with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


