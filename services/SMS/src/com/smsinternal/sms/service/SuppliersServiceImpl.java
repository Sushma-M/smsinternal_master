/*Copyright (c) 2016-2017 jjrichards.com.au All Rights Reserved.
 This software is the confidential and proprietary information of jjrichards.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with jjrichards.com.au*/

package com.smsinternal.sms.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.smsinternal.sms.*;


/**
 * ServiceImpl object for domain model class Suppliers.
 * @see com.smsinternal.sms.Suppliers
 */
@Service("SMS.SuppliersService")
public class SuppliersServiceImpl implements SuppliersService {


    private static final Logger LOGGER = LoggerFactory.getLogger(SuppliersServiceImpl.class);

    @Autowired
    @Qualifier("SMS.SuppliersDao")
    private WMGenericDao<Suppliers, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Suppliers, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "SMSTransactionManager")
     public Page<Suppliers> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "SMSTransactionManager")
    @Override
    public Suppliers create(Suppliers suppliers) {
        LOGGER.debug("Creating a new suppliers with information: {}" , suppliers);
        return this.wmGenericDao.create(suppliers);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SMSTransactionManager")
    @Override
    public Suppliers delete(Integer suppliersId) throws EntityNotFoundException {
        LOGGER.debug("Deleting suppliers with id: {}" , suppliersId);
        Suppliers deleted = this.wmGenericDao.findById(suppliersId);
        if (deleted == null) {
            LOGGER.debug("No suppliers found with id: {}" , suppliersId);
            throw new EntityNotFoundException(String.valueOf(suppliersId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public Page<Suppliers> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all supplierss");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public Page<Suppliers> findAll(Pageable pageable) {
        LOGGER.debug("Finding all supplierss");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public Suppliers findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding suppliers by id: {}" , id);
        Suppliers suppliers=this.wmGenericDao.findById(id);
        if(suppliers==null){
            LOGGER.debug("No suppliers found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return suppliers;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SMSTransactionManager")
    @Override
    public Suppliers update(Suppliers updated) throws EntityNotFoundException {
        LOGGER.debug("Updating suppliers with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


