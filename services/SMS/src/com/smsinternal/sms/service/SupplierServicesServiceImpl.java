/*Copyright (c) 2016-2017 jjrichards.com.au All Rights Reserved.
 This software is the confidential and proprietary information of jjrichards.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with jjrichards.com.au*/

package com.smsinternal.sms.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.smsinternal.sms.*;


/**
 * ServiceImpl object for domain model class SupplierServices.
 * @see com.smsinternal.sms.SupplierServices
 */
@Service("SMS.SupplierServicesService")
public class SupplierServicesServiceImpl implements SupplierServicesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(SupplierServicesServiceImpl.class);

    @Autowired
    @Qualifier("SMS.SupplierServicesDao")
    private WMGenericDao<SupplierServices, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SupplierServices, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "SMSTransactionManager")
     public Page<SupplierServices> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "SMSTransactionManager")
    @Override
    public SupplierServices create(SupplierServices supplierservices) {
        LOGGER.debug("Creating a new supplierservices with information: {}" , supplierservices);
        return this.wmGenericDao.create(supplierservices);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SMSTransactionManager")
    @Override
    public SupplierServices delete(Integer supplierservicesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting supplierservices with id: {}" , supplierservicesId);
        SupplierServices deleted = this.wmGenericDao.findById(supplierservicesId);
        if (deleted == null) {
            LOGGER.debug("No supplierservices found with id: {}" , supplierservicesId);
            throw new EntityNotFoundException(String.valueOf(supplierservicesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public Page<SupplierServices> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all supplierservicess");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public Page<SupplierServices> findAll(Pageable pageable) {
        LOGGER.debug("Finding all supplierservicess");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public SupplierServices findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding supplierservices by id: {}" , id);
        SupplierServices supplierservices=this.wmGenericDao.findById(id);
        if(supplierservices==null){
            LOGGER.debug("No supplierservices found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return supplierservices;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SMSTransactionManager")
    @Override
    public SupplierServices update(SupplierServices updated) throws EntityNotFoundException {
        LOGGER.debug("Updating supplierservices with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


