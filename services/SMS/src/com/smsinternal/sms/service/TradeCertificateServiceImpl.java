/*Copyright (c) 2016-2017 jjrichards.com.au All Rights Reserved.
 This software is the confidential and proprietary information of jjrichards.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with jjrichards.com.au*/

package com.smsinternal.sms.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.smsinternal.sms.*;


/**
 * ServiceImpl object for domain model class TradeCertificate.
 * @see com.smsinternal.sms.TradeCertificate
 */
@Service("SMS.TradeCertificateService")
public class TradeCertificateServiceImpl implements TradeCertificateService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TradeCertificateServiceImpl.class);

    @Autowired
    @Qualifier("SMS.TradeCertificateDao")
    private WMGenericDao<TradeCertificate, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TradeCertificate, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "SMSTransactionManager")
     public Page<TradeCertificate> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "SMSTransactionManager")
    @Override
    public TradeCertificate create(TradeCertificate tradecertificate) {
        LOGGER.debug("Creating a new tradecertificate with information: {}" , tradecertificate);
        return this.wmGenericDao.create(tradecertificate);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SMSTransactionManager")
    @Override
    public TradeCertificate delete(Integer tradecertificateId) throws EntityNotFoundException {
        LOGGER.debug("Deleting tradecertificate with id: {}" , tradecertificateId);
        TradeCertificate deleted = this.wmGenericDao.findById(tradecertificateId);
        if (deleted == null) {
            LOGGER.debug("No tradecertificate found with id: {}" , tradecertificateId);
            throw new EntityNotFoundException(String.valueOf(tradecertificateId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public Page<TradeCertificate> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all tradecertificates");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public Page<TradeCertificate> findAll(Pageable pageable) {
        LOGGER.debug("Finding all tradecertificates");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public TradeCertificate findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding tradecertificate by id: {}" , id);
        TradeCertificate tradecertificate=this.wmGenericDao.findById(id);
        if(tradecertificate==null){
            LOGGER.debug("No tradecertificate found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return tradecertificate;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SMSTransactionManager")
    @Override
    public TradeCertificate update(TradeCertificate updated) throws EntityNotFoundException {
        LOGGER.debug("Updating tradecertificate with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


