/*Copyright (c) 2016-2017 jjrichards.com.au All Rights Reserved.
 This software is the confidential and proprietary information of jjrichards.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with jjrichards.com.au*/

package com.smsinternal.sms.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.smsinternal.sms.*;

/**
 * Service object for domain model class MontorVehicleInsurance.
 * @see com.smsinternal.sms.MontorVehicleInsurance
 */

public interface MontorVehicleInsuranceService {
   /**
	 * Creates a new montorvehicleinsurance.
	 * 
	 * @param created
	 *            The information of the created montorvehicleinsurance.
	 * @return The created montorvehicleinsurance.
	 */
	public MontorVehicleInsurance create(MontorVehicleInsurance created);

	/**
	 * Deletes a montorvehicleinsurance.
	 * 
	 * @param montorvehicleinsuranceId
	 *            The id of the deleted montorvehicleinsurance.
	 * @return The deleted montorvehicleinsurance.
	 * @throws EntityNotFoundException
	 *             if no montorvehicleinsurance is found with the given id.
	 */
	public MontorVehicleInsurance delete(Integer montorvehicleinsuranceId) throws EntityNotFoundException;

	/**
	 * Finds all montorvehicleinsurances.
	 * 
	 * @return A list of montorvehicleinsurances.
	 */
	public Page<MontorVehicleInsurance> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<MontorVehicleInsurance> findAll(Pageable pageable);
	
	/**
	 * Finds montorvehicleinsurance by id.
	 * 
	 * @param id
	 *            The id of the wanted montorvehicleinsurance.
	 * @return The found montorvehicleinsurance. If no montorvehicleinsurance is found, this method returns
	 *         null.
	 */
	public MontorVehicleInsurance findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a montorvehicleinsurance.
	 * 
	 * @param updated
	 *            The information of the updated montorvehicleinsurance.
	 * @return The updated montorvehicleinsurance.
	 * @throws EntityNotFoundException
	 *             if no montorvehicleinsurance is found with given id.
	 */
	public MontorVehicleInsurance update(MontorVehicleInsurance updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the montorvehicleinsurances in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the montorvehicleinsurance.
	 */

	public long countAll();


    public Page<MontorVehicleInsurance> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

