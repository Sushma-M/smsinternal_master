/*Copyright (c) 2016-2017 jjrichards.com.au All Rights Reserved.
 This software is the confidential and proprietary information of jjrichards.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with jjrichards.com.au*/

package com.smsinternal.sms.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.smsinternal.sms.*;


/**
 * ServiceImpl object for domain model class Countries.
 * @see com.smsinternal.sms.Countries
 */
@Service("SMS.CountriesService")
public class CountriesServiceImpl implements CountriesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(CountriesServiceImpl.class);

    @Autowired
    @Qualifier("SMS.CountriesDao")
    private WMGenericDao<Countries, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Countries, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "SMSTransactionManager")
     public Page<Countries> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "SMSTransactionManager")
    @Override
    public Countries create(Countries countries) {
        LOGGER.debug("Creating a new countries with information: {}" , countries);
        return this.wmGenericDao.create(countries);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SMSTransactionManager")
    @Override
    public Countries delete(Integer countriesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting countries with id: {}" , countriesId);
        Countries deleted = this.wmGenericDao.findById(countriesId);
        if (deleted == null) {
            LOGGER.debug("No countries found with id: {}" , countriesId);
            throw new EntityNotFoundException(String.valueOf(countriesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public Page<Countries> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all countriess");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public Page<Countries> findAll(Pageable pageable) {
        LOGGER.debug("Finding all countriess");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public Countries findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding countries by id: {}" , id);
        Countries countries=this.wmGenericDao.findById(id);
        if(countries==null){
            LOGGER.debug("No countries found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return countries;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SMSTransactionManager")
    @Override
    public Countries update(Countries updated) throws EntityNotFoundException {
        LOGGER.debug("Updating countries with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


