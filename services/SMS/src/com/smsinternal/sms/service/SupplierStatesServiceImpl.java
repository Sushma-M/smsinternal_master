/*Copyright (c) 2016-2017 jjrichards.com.au All Rights Reserved.
 This software is the confidential and proprietary information of jjrichards.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with jjrichards.com.au*/

package com.smsinternal.sms.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.smsinternal.sms.*;


/**
 * ServiceImpl object for domain model class SupplierStates.
 * @see com.smsinternal.sms.SupplierStates
 */
@Service("SMS.SupplierStatesService")
public class SupplierStatesServiceImpl implements SupplierStatesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(SupplierStatesServiceImpl.class);

    @Autowired
    @Qualifier("SMS.SupplierStatesDao")
    private WMGenericDao<SupplierStates, SupplierStatesId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SupplierStates, SupplierStatesId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "SMSTransactionManager")
     public Page<SupplierStates> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "SMSTransactionManager")
    @Override
    public SupplierStates create(SupplierStates supplierstates) {
        LOGGER.debug("Creating a new supplierstates with information: {}" , supplierstates);
        return this.wmGenericDao.create(supplierstates);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SMSTransactionManager")
    @Override
    public SupplierStates delete(SupplierStatesId supplierstatesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting supplierstates with id: {}" , supplierstatesId);
        SupplierStates deleted = this.wmGenericDao.findById(supplierstatesId);
        if (deleted == null) {
            LOGGER.debug("No supplierstates found with id: {}" , supplierstatesId);
            throw new EntityNotFoundException(String.valueOf(supplierstatesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public Page<SupplierStates> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all supplierstatess");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public Page<SupplierStates> findAll(Pageable pageable) {
        LOGGER.debug("Finding all supplierstatess");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public SupplierStates findById(SupplierStatesId id) throws EntityNotFoundException {
        LOGGER.debug("Finding supplierstates by id: {}" , id);
        SupplierStates supplierstates=this.wmGenericDao.findById(id);
        if(supplierstates==null){
            LOGGER.debug("No supplierstates found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return supplierstates;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SMSTransactionManager")
    @Override
    public SupplierStates update(SupplierStates updated) throws EntityNotFoundException {
        LOGGER.debug("Updating supplierstates with information: {}" , updated);
        this.wmGenericDao.update(updated);

        SupplierStatesId id = new SupplierStatesId();
        id.setId(updated.getId());
        id.setSupplierId(updated.getSupplierId());
        id.setStatesId(updated.getStatesId());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


