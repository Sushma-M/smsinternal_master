/*Copyright (c) 2016-2017 jjrichards.com.au All Rights Reserved.
 This software is the confidential and proprietary information of jjrichards.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with jjrichards.com.au*/

package com.smsinternal.sms.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.smsinternal.sms.*;


/**
 * ServiceImpl object for domain model class MontorVehicleInsurance.
 * @see com.smsinternal.sms.MontorVehicleInsurance
 */
@Service("SMS.MontorVehicleInsuranceService")
public class MontorVehicleInsuranceServiceImpl implements MontorVehicleInsuranceService {


    private static final Logger LOGGER = LoggerFactory.getLogger(MontorVehicleInsuranceServiceImpl.class);

    @Autowired
    @Qualifier("SMS.MontorVehicleInsuranceDao")
    private WMGenericDao<MontorVehicleInsurance, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<MontorVehicleInsurance, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "SMSTransactionManager")
     public Page<MontorVehicleInsurance> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "SMSTransactionManager")
    @Override
    public MontorVehicleInsurance create(MontorVehicleInsurance montorvehicleinsurance) {
        LOGGER.debug("Creating a new montorvehicleinsurance with information: {}" , montorvehicleinsurance);
        return this.wmGenericDao.create(montorvehicleinsurance);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SMSTransactionManager")
    @Override
    public MontorVehicleInsurance delete(Integer montorvehicleinsuranceId) throws EntityNotFoundException {
        LOGGER.debug("Deleting montorvehicleinsurance with id: {}" , montorvehicleinsuranceId);
        MontorVehicleInsurance deleted = this.wmGenericDao.findById(montorvehicleinsuranceId);
        if (deleted == null) {
            LOGGER.debug("No montorvehicleinsurance found with id: {}" , montorvehicleinsuranceId);
            throw new EntityNotFoundException(String.valueOf(montorvehicleinsuranceId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public Page<MontorVehicleInsurance> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all montorvehicleinsurances");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public Page<MontorVehicleInsurance> findAll(Pageable pageable) {
        LOGGER.debug("Finding all montorvehicleinsurances");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public MontorVehicleInsurance findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding montorvehicleinsurance by id: {}" , id);
        MontorVehicleInsurance montorvehicleinsurance=this.wmGenericDao.findById(id);
        if(montorvehicleinsurance==null){
            LOGGER.debug("No montorvehicleinsurance found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return montorvehicleinsurance;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SMSTransactionManager")
    @Override
    public MontorVehicleInsurance update(MontorVehicleInsurance updated) throws EntityNotFoundException {
        LOGGER.debug("Updating montorvehicleinsurance with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


