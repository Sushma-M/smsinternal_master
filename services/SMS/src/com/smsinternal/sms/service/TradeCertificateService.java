/*Copyright (c) 2016-2017 jjrichards.com.au All Rights Reserved.
 This software is the confidential and proprietary information of jjrichards.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with jjrichards.com.au*/

package com.smsinternal.sms.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.smsinternal.sms.*;

/**
 * Service object for domain model class TradeCertificate.
 * @see com.smsinternal.sms.TradeCertificate
 */

public interface TradeCertificateService {
   /**
	 * Creates a new tradecertificate.
	 * 
	 * @param created
	 *            The information of the created tradecertificate.
	 * @return The created tradecertificate.
	 */
	public TradeCertificate create(TradeCertificate created);

	/**
	 * Deletes a tradecertificate.
	 * 
	 * @param tradecertificateId
	 *            The id of the deleted tradecertificate.
	 * @return The deleted tradecertificate.
	 * @throws EntityNotFoundException
	 *             if no tradecertificate is found with the given id.
	 */
	public TradeCertificate delete(Integer tradecertificateId) throws EntityNotFoundException;

	/**
	 * Finds all tradecertificates.
	 * 
	 * @return A list of tradecertificates.
	 */
	public Page<TradeCertificate> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<TradeCertificate> findAll(Pageable pageable);
	
	/**
	 * Finds tradecertificate by id.
	 * 
	 * @param id
	 *            The id of the wanted tradecertificate.
	 * @return The found tradecertificate. If no tradecertificate is found, this method returns
	 *         null.
	 */
	public TradeCertificate findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a tradecertificate.
	 * 
	 * @param updated
	 *            The information of the updated tradecertificate.
	 * @return The updated tradecertificate.
	 * @throws EntityNotFoundException
	 *             if no tradecertificate is found with given id.
	 */
	public TradeCertificate update(TradeCertificate updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the tradecertificates in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the tradecertificate.
	 */

	public long countAll();


    public Page<TradeCertificate> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

