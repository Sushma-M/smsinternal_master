/*Copyright (c) 2016-2017 jjrichards.com.au All Rights Reserved.
 This software is the confidential and proprietary information of jjrichards.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with jjrichards.com.au*/

package com.smsinternal.sms.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.smsinternal.sms.*;


/**
 * ServiceImpl object for domain model class ServiceTypes.
 * @see com.smsinternal.sms.ServiceTypes
 */
@Service("SMS.ServiceTypesService")
public class ServiceTypesServiceImpl implements ServiceTypesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ServiceTypesServiceImpl.class);

    @Autowired
    @Qualifier("SMS.ServiceTypesDao")
    private WMGenericDao<ServiceTypes, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ServiceTypes, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "SMSTransactionManager")
     public Page<ServiceTypes> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "SMSTransactionManager")
    @Override
    public ServiceTypes create(ServiceTypes servicetypes) {
        LOGGER.debug("Creating a new servicetypes with information: {}" , servicetypes);
        return this.wmGenericDao.create(servicetypes);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SMSTransactionManager")
    @Override
    public ServiceTypes delete(Integer servicetypesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting servicetypes with id: {}" , servicetypesId);
        ServiceTypes deleted = this.wmGenericDao.findById(servicetypesId);
        if (deleted == null) {
            LOGGER.debug("No servicetypes found with id: {}" , servicetypesId);
            throw new EntityNotFoundException(String.valueOf(servicetypesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public Page<ServiceTypes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all servicetypess");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public Page<ServiceTypes> findAll(Pageable pageable) {
        LOGGER.debug("Finding all servicetypess");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public ServiceTypes findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding servicetypes by id: {}" , id);
        ServiceTypes servicetypes=this.wmGenericDao.findById(id);
        if(servicetypes==null){
            LOGGER.debug("No servicetypes found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return servicetypes;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SMSTransactionManager")
    @Override
    public ServiceTypes update(ServiceTypes updated) throws EntityNotFoundException {
        LOGGER.debug("Updating servicetypes with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


