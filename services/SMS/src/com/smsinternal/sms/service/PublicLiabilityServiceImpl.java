/*Copyright (c) 2016-2017 jjrichards.com.au All Rights Reserved.
 This software is the confidential and proprietary information of jjrichards.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with jjrichards.com.au*/

package com.smsinternal.sms.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.smsinternal.sms.*;


/**
 * ServiceImpl object for domain model class PublicLiability.
 * @see com.smsinternal.sms.PublicLiability
 */
@Service("SMS.PublicLiabilityService")
public class PublicLiabilityServiceImpl implements PublicLiabilityService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PublicLiabilityServiceImpl.class);

    @Autowired
    @Qualifier("SMS.PublicLiabilityDao")
    private WMGenericDao<PublicLiability, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PublicLiability, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "SMSTransactionManager")
     public Page<PublicLiability> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "SMSTransactionManager")
    @Override
    public PublicLiability create(PublicLiability publicliability) {
        LOGGER.debug("Creating a new publicliability with information: {}" , publicliability);
        return this.wmGenericDao.create(publicliability);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SMSTransactionManager")
    @Override
    public PublicLiability delete(Integer publicliabilityId) throws EntityNotFoundException {
        LOGGER.debug("Deleting publicliability with id: {}" , publicliabilityId);
        PublicLiability deleted = this.wmGenericDao.findById(publicliabilityId);
        if (deleted == null) {
            LOGGER.debug("No publicliability found with id: {}" , publicliabilityId);
            throw new EntityNotFoundException(String.valueOf(publicliabilityId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public Page<PublicLiability> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all publicliabilitys");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public Page<PublicLiability> findAll(Pageable pageable) {
        LOGGER.debug("Finding all publicliabilitys");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public PublicLiability findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding publicliability by id: {}" , id);
        PublicLiability publicliability=this.wmGenericDao.findById(id);
        if(publicliability==null){
            LOGGER.debug("No publicliability found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return publicliability;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "SMSTransactionManager")
    @Override
    public PublicLiability update(PublicLiability updated) throws EntityNotFoundException {
        LOGGER.debug("Updating publicliability with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "SMSTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


