/*Copyright (c) 2016-2017 jjrichards.com.au All Rights Reserved.
 This software is the confidential and proprietary information of jjrichards.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with jjrichards.com.au*/

package com.smsinternal.sms.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.smsinternal.sms.*;

/**
 * Service object for domain model class ServiceTypes.
 * @see com.smsinternal.sms.ServiceTypes
 */

public interface ServiceTypesService {
   /**
	 * Creates a new servicetypes.
	 * 
	 * @param created
	 *            The information of the created servicetypes.
	 * @return The created servicetypes.
	 */
	public ServiceTypes create(ServiceTypes created);

	/**
	 * Deletes a servicetypes.
	 * 
	 * @param servicetypesId
	 *            The id of the deleted servicetypes.
	 * @return The deleted servicetypes.
	 * @throws EntityNotFoundException
	 *             if no servicetypes is found with the given id.
	 */
	public ServiceTypes delete(Integer servicetypesId) throws EntityNotFoundException;

	/**
	 * Finds all servicetypess.
	 * 
	 * @return A list of servicetypess.
	 */
	public Page<ServiceTypes> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<ServiceTypes> findAll(Pageable pageable);
	
	/**
	 * Finds servicetypes by id.
	 * 
	 * @param id
	 *            The id of the wanted servicetypes.
	 * @return The found servicetypes. If no servicetypes is found, this method returns
	 *         null.
	 */
	public ServiceTypes findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a servicetypes.
	 * 
	 * @param updated
	 *            The information of the updated servicetypes.
	 * @return The updated servicetypes.
	 * @throws EntityNotFoundException
	 *             if no servicetypes is found with given id.
	 */
	public ServiceTypes update(ServiceTypes updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the servicetypess in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the servicetypes.
	 */

	public long countAll();


    public Page<ServiceTypes> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

