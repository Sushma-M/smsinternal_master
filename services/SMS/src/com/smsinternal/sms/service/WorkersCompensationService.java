/*Copyright (c) 2016-2017 jjrichards.com.au All Rights Reserved.
 This software is the confidential and proprietary information of jjrichards.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with jjrichards.com.au*/

package com.smsinternal.sms.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.smsinternal.sms.*;

/**
 * Service object for domain model class WorkersCompensation.
 * @see com.smsinternal.sms.WorkersCompensation
 */

public interface WorkersCompensationService {
   /**
	 * Creates a new workerscompensation.
	 * 
	 * @param created
	 *            The information of the created workerscompensation.
	 * @return The created workerscompensation.
	 */
	public WorkersCompensation create(WorkersCompensation created);

	/**
	 * Deletes a workerscompensation.
	 * 
	 * @param workerscompensationId
	 *            The id of the deleted workerscompensation.
	 * @return The deleted workerscompensation.
	 * @throws EntityNotFoundException
	 *             if no workerscompensation is found with the given id.
	 */
	public WorkersCompensation delete(Integer workerscompensationId) throws EntityNotFoundException;

	/**
	 * Finds all workerscompensations.
	 * 
	 * @return A list of workerscompensations.
	 */
	public Page<WorkersCompensation> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<WorkersCompensation> findAll(Pageable pageable);
	
	/**
	 * Finds workerscompensation by id.
	 * 
	 * @param id
	 *            The id of the wanted workerscompensation.
	 * @return The found workerscompensation. If no workerscompensation is found, this method returns
	 *         null.
	 */
	public WorkersCompensation findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a workerscompensation.
	 * 
	 * @param updated
	 *            The information of the updated workerscompensation.
	 * @return The updated workerscompensation.
	 * @throws EntityNotFoundException
	 *             if no workerscompensation is found with given id.
	 */
	public WorkersCompensation update(WorkersCompensation updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the workerscompensations in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the workerscompensation.
	 */

	public long countAll();


    public Page<WorkersCompensation> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

