/*Copyright (c) 2016-2017 jjrichards.com.au All Rights Reserved.
 This software is the confidential and proprietary information of jjrichards.com.au You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with jjrichards.com.au*/

package com.smsinternal.sms.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.smsinternal.sms.*;

/**
 * Service object for domain model class Suppliers.
 * @see com.smsinternal.sms.Suppliers
 */

public interface SuppliersService {
   /**
	 * Creates a new suppliers.
	 * 
	 * @param created
	 *            The information of the created suppliers.
	 * @return The created suppliers.
	 */
	public Suppliers create(Suppliers created);

	/**
	 * Deletes a suppliers.
	 * 
	 * @param suppliersId
	 *            The id of the deleted suppliers.
	 * @return The deleted suppliers.
	 * @throws EntityNotFoundException
	 *             if no suppliers is found with the given id.
	 */
	public Suppliers delete(Integer suppliersId) throws EntityNotFoundException;

	/**
	 * Finds all supplierss.
	 * 
	 * @return A list of supplierss.
	 */
	public Page<Suppliers> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Suppliers> findAll(Pageable pageable);
	
	/**
	 * Finds suppliers by id.
	 * 
	 * @param id
	 *            The id of the wanted suppliers.
	 * @return The found suppliers. If no suppliers is found, this method returns
	 *         null.
	 */
	public Suppliers findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a suppliers.
	 * 
	 * @param updated
	 *            The information of the updated suppliers.
	 * @return The updated suppliers.
	 * @throws EntityNotFoundException
	 *             if no suppliers is found with given id.
	 */
	public Suppliers update(Suppliers updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the supplierss in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the suppliers.
	 */

	public long countAll();


    public Page<Suppliers> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

